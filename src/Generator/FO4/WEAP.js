let {
    flags, def, req, uint16, subrecord, 
    ckFormId, string, bytes, size, conflictType, 
    memberStruct, float, uint32, format, enumeration, 
    uint8, struct, array, record
} = require('../helpers');

module.exports = () => {
    record('WEAP', 'Weapon', {
        flags: flags({
            2: 'Non-Playable',
            12: 'Ignored',
            30: 'High-Res 1st Person Only'
        }),
        members: [
            def('EDID'),
            def('VMAD'),
            req(def('OBND')),
            def('PTRN'),
            def('STCP'),
            def('FULL'),
            def('MODL'),
            def('ICON'),
            def('MICO'),
            def('EITM'),
            subrecord('EAMT', uint16('Enchantment Amount')),
            def('DEST'),
            def('ETYP'),
            subrecord('BIDS', ckFormId('Block Bash Impact Data Set', ['IPDS', 'NULL'])),
            subrecord('BAMT', ckFormId('Alternate Block Material', ['MATT', 'NULL'])),
            def('YNAM'),
            def('ZNAM'),
            def('KSIZ'),
            def('KWDAs'),
            def('DESC'),
            subrecord('INRD', ckFormId('Instance Naming', ['INNR'])),
            def('APPR'),
            def('ObjectTemplate'),
            subrecord('NNAM', ckFormId('Embedded Weapon Mod', ['OMOD'])),
            memberStruct('1st Person Model', [
                subrecord('MOD4', string('Model FileName')),
                subrecord('MO4T', conflictType('Ignore', size(0, bytes('Texture Files Hashes')))),
                def('MO4S'),
                def('MO4C'),
                def('MO4F')
            ]),
            subrecord('DNAM', struct('Data', [
                ckFormId('Ammo', ['AMMO', 'NULL']),
                float('Speed'),
                float('Reload Speed'),
                float('Reach'),
                float('Min Range'),
                float('Max Range'),
                float('Attack Delay'),
                size(4, bytes('Unknown')),
                float('Damage - OutOfRange Mult'),
                format(uint32('On Hit'), def('HitBehaviourEnum')),
                ckFormId('Skill', ['AVIF', 'NULL']),
                ckFormId('Resist', ['AVIF', 'NULL']),
                format(uint32('Flags'), flags({
                    0: 'Player Only',
                    1: 'NPCs Use Ammo',
                    2: 'No Jam After Reload',
                    3: 'Charging Reload',
                    4: 'Minor Crime',
                    5: 'Fixed Range',
                    6: 'Not Used In Normal Combat',
                    7: 'Unknown 8',
                    8: 'Crit Effect - on Death',
                    9: 'Charging Attack',
                    10: 'Unknown 11',
                    11: 'Hold Input To Power',
                    12: 'Non Hostile',
                    13: 'Bound Weapon',
                    14: 'Ignores Normal Weapon Resistance',
                    15: 'Automatic',
                    16: 'Repeatable Single Fire',
                    17: 'Can\'t Drop',
                    18: 'Hide Backpack',
                    19: 'Embedded Weapon',
                    20: 'Not Playable',
                    21: 'Has Scope',
                    22: 'Bolt Action',
                    23: 'Secondary Weapon',
                    24: 'Disable Shells',
                    25: 'Unknown 26',
                    26: 'Unknown 27',
                    27: 'Unknown 28',
                    28: 'Unknown 29',
                    29: 'Unknown 30',
                    30: 'Unknown 31',
                    31: 'Unknown 32'
                })),
                uint16('Capacity'),
                format(uint8('Animation Type'), enumeration({
                    0: 'HandToHandMelee',
                    1: 'OneHandSword',
                    2: 'OneHandDagger',
                    3: 'OneHandAxe',
                    4: 'OneHandMace',
                    5: 'TwoHandSword',
                    6: 'TwoHandAxe',
                    7: 'Bow',
                    8: 'Staff',
                    9: 'Gun',
                    10: 'Grenade',
                    11: 'Mine'
                })),
                float('Damage - Secondary'),
                float('Weight'),
                uint32('Value'),
                uint16('Damage - Base'),
                format(uint32('Sound Level'), def('SoundLevelEnum')),
                ckFormId('Sound - Attack', ['SNDR', 'NULL']),
                ckFormId('Sound - Attack 2D', ['SNDR', 'NULL']),
                ckFormId('Sound - Attack Loop', ['SNDR', 'NULL']),
                ckFormId('Sound - Attack Fail', ['SNDR', 'NULL']),
                ckFormId('Sound - Idle', ['SNDR', 'NULL']),
                ckFormId('Sound - Equip Sound', ['SNDR', 'NULL']),
                ckFormId('Sound - UnEquip Sound', ['SNDR', 'NULL']),
                ckFormId('Sound - Fast Equip Sound', ['SNDR', 'NULL']),
                uint8('Accuracy Bonus'),
                float('Animation Attack Seconds'),
                size(2, bytes('Unknown')),
                float('Action Point Cost'),
                float('Full Power Seconds'),
                float('Min Power Per Shot'),
                format(uint32('Stagger'), def('StaggerEnum')),
                size(4, bytes('Unknown'))
            ])),
            subrecord('FNAM', struct('', [
                float('Animation Fire Seconds'),
                float('Rumble - Left Motor Strength'),
                float('Rumble - Right Motor Strength'),
                float('Rumble - Duration'),
                float('Animation Reload Seconds'),
                size(4, bytes('Unknown')),
                float('Sighted Transition Seconds'),
                uint8('# Projectiles'),
                ckFormId('Override Projectile', ['PROJ', 'NULL']),
                format(uint32('Pattern'), enumeration({
                    0: 'Constant',
                    1: 'Square',
                    2: 'Triangle',
                    3: 'Sawtooth'
                })),
                uint32('Rumble - Peroid (ms)')
            ])),
            subrecord('CRDT', struct('Critical Data', [
                float('Crit Damage Mult'),
                float('Crit Charge Bonus'),
                ckFormId('Crit Effect', ['SPEL', 'NULL'])
            ])),
            subrecord('INAM', ckFormId('Impact Data Set', ['IPDS'])),
            subrecord('LNAM', ckFormId('NPC Add Ammo List', ['LVLI'])),
            subrecord('WAMD', ckFormId('Aim Model', ['AMDL'])),
            subrecord('WZMD', ckFormId('Zoom', ['ZOOM'])),
            subrecord('CNAM', ckFormId('Template', ['WEAP'])),
            subrecord(DAMA, array('Damage Types', 
                struct('Damage Type', [
                    ckFormId('Type', ['DMGT']),
                    uint32('Amount')
                ])
            )),
            def('FLTR'),
            subrecord('MASE', format(uint32('Melee Speed'), enumeration({
                0: 'Very Slow',
                1: 'Slow',
                2: 'Medium',
                3: 'Fast',
                4: 'Very Fast'
            })))
        ]
    })
};